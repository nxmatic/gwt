name: Nix Development Environment Workflow

on: [push, pull_request]

jobs:

  determine-runner:
    defaults:
      run:
        working-directory: .
    outputs:
      runner: ${{ steps.set-runner.outputs.runner }}
    runs-on: ubuntu-latest
    steps:
      - id: set-runner
        run: |
          cat <<! | cut -c 3- | tee -a "$GITHUB_OUTPUT"
            runner=${{ github.repository_owner == github.actor && 'self-hosted' || 'ubuntu-latest' }}
          !

  build:
    needs: determine-runner
    outputs:
      distribution: ${{ steps.build.outputs.distribution }}
    runs-on: ${{ needs.determine-runner.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Check the package availability
        run: |
          cat <<~ | cut -c 3- | tee -a "${GITHUB_OUTPUT}"
            isAvailable=$( nix store verify --impure .devenv/dist#gwt && echo 'true' || echo 'false' )
          ~
        shell: bash
        id: package-availability

      - name: Build package
        if: ${{ steps.package-availability.outputs.isAvailable == 'false' }}
        run: |
          nix-build-gwt
          cat <<~ | cut -c 3- | tee -a "${GITHUB_OUTPUT}"
            distribution<<EOS
            {
              "version": "${GWT_VERSION}",
              "name": "gwt-${GWT_VERSION}.zip",
            }
            EOS
          ~
          cat <<~ | cut -c 3- | tee -a "${GITHUB_ENV}"
            GWT_VERSION=${GWT_VERSION}
            GWT_DIST_FILE=$( realpath .devenv/dist/result/gwt-${GWT_VERSION}.zip )
          ~
        shell: nix develop .devenv -c bash -xe -o pipefail {0}
        id: build

      - name: Upload distribution
        if: ${{ steps.package-availability.outputs.isAvailable == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ fromJson(steps.build.outputs.distribution).name }}
          path: ${{ env.GWT_DIST_FILE }}
          retention-days: 1
          if-no-files-found: error

  deploy:
    needs: [determine-runner, build]
    runs-on: ${{ needs.determine-runner.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Cleanup packages
        run: |
          gh extension install nxmatic/gh-maven # should go in flake later
          gh maven delete org.gwtproject %
        shell: nix develop main/.devenv -c bash -xe -o pipefail {0}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy maven artifacts in github packages
        uses: ./.github/actions/maven-deploy
        with:
          working_directory: ./
          distribution: ${{ needs.build.outputs.distribution }}
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          server: |
            id: github
            url: https://maven.pkg.github.com/${{ github.repository }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [determine-runner, build]
    runs-on: ${{ needs.determine-runner.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - uses: ./.github/actions/maven-deploy
        with:
          working_directory: ./
          distribution: ${{ needs.build.outputs.distribution }}
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          server: ${{ secrets.RELEASE_MAVEN_SERVER }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ${{ fromJson(needs.build.outputs.distribution).name }}
          asset_path: ${{ fromJson(needs.build.outputs.distribution).path }}
          asset_content_type: application/zip
