name: Nix Development Environment Workflow

on:
  pull_request:
    branches:
      - 'main-nuxeo'
  push:
    branches:
      - '*-nuxeo'
    tags:
      - '*-NX*'
  workflow_dispatch:
    inputs:
      gwt_version:
        description: 'GWT version to update to (tag in upstream GWT repo)'
        required: true

jobs:

  is-self-hosted:
    defaults:
      run:
        working-directory: .
    outputs:
      runner: ${{ steps.set-runner.outputs.runner }}
    runs-on: ubuntu-latest
    steps:
      - id: set-runner
        run: |
          cat <<! | cut -c 3- | tee -a "$GITHUB_OUTPUT"
            runner=${{ github.repository_owner == github.actor && 'self-hosted' || 'ubuntu-latest' }}
          !

  update-gwt-version:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create new version branch with patch and workflow
        env:
          GWT_VERSION: ${{ github.event.inputs.gwt_version }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Fetch the upstream GWT repository
          git remote add upstream https://github.com/gwtproject/gwt.git
          git fetch upstream
          
          # Fetch the main-nuxeo branch
          git fetch origin main-nuxeo
          
          # Create a new branch from the GWT version tag
          git checkout -b update-gwt-$GWT_VERSION upstream/$GWT_VERSION
          
          # Get the commit hashes of changes unique to main-nuxeo
          UNIQUE_COMMITS=$(git log --format=%H upstream/$GWT_VERSION..origin/main-nuxeo)
          
          # Cherry-pick the unique commits
          for commit in $UNIQUE_COMMITS; do
            git cherry-pick $commit || {
              echo "Failed to cherry-pick commit $commit. Manual intervention required."
              git cherry-pick --abort
              exit 1
            }
          done
          
          # Push the new branch
          git push origin update-gwt-$GWT_VERSION
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Update to GWT ${{ github.event.inputs.gwt_version }}"
          body: "This PR updates the fork to GWT version ${{ github.event.inputs.gwt_version }} and applies the Nuxeo patches and workflow."
          branch: update-gwt-${{ github.event.inputs.gwt_version }}
          base: main-nuxeo

  build:
    needs: is-self-hosted
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    outputs:
      distribution: ${{ steps.build.outputs.distribution }}
    runs-on: ${{ needs.is-self-hosted.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Check the package availability
        run: |
          cat <<~ | cut -c 3- | tee -a "${GITHUB_OUTPUT}"
            isAvailable=$( nix store verify --impure .devenv/dist#gwt && echo 'true' || echo 'false' )
          ~
        shell: bash
        id: package-availability

      - name: Build package
        if: ${{ steps.package-availability.outputs.isAvailable == 'false' }}
        run: |
          nix-build-gwt
          cat <<~ | cut -c 3- | tee -a "${GITHUB_OUTPUT}"
            distribution<<EOS
            {
              "version": "${GWT_VERSION}",
              "name": "gwt-${GWT_VERSION}.zip",
            }
            EOS
          ~
          cat <<~ | cut -c 3- | tee -a "${GITHUB_ENV}"
            GWT_VERSION=${GWT_VERSION}
            GWT_DIST_FILE=$( realpath .devenv/dist/result/gwt-${GWT_VERSION}.zip )
          ~
        shell: nix develop .devenv -c bash -xe -o pipefail {0}
        id: build

      - name: Upload distribution
        if: ${{ steps.package-availability.outputs.isAvailable == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ fromJson(steps.build.outputs.distribution).name }}
          path: ${{ env.GWT_DIST_FILE }}
          retention-days: 1
          if-no-files-found: error

  deploy:
    needs: [is-self-hosted, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main-nuxeo'
    runs-on: ${{ needs.is-self-hosted.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Cleanup packages
        run: |
          gh extension install nxmatic/gh-maven # should go in flake later
          gh maven delete org.gwtproject %
        shell: nix develop main/.devenv -c bash -xe -o pipefail {0}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy maven artifacts in github packages
        uses: ./.github/actions/maven-deploy
        with:
          working_directory: ./
          distribution: ${{ needs.build.outputs.distribution }}
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          server: |
            id: github
            url: https://maven.pkg.github.com/${{ github.repository }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [is-self-hosted, build]
    runs-on: ${{ needs.is-self-hosted.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Set up Nix Development Environment
        uses: ./.github/actions/nix-develop
        with:
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - uses: ./.github/actions/maven-deploy
        with:
          working_directory: ./
          distribution: ${{ needs.build.outputs.distribution }}
          cachix_auth_token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          server: ${{ secrets.RELEASE_MAVEN_SERVER }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ${{ fromJson(needs.build.outputs.distribution).name }}
          asset_path: ${{ fromJson(needs.build.outputs.distribution).path }}
          asset_content_type: application/zip
